/* plugin-debian-0.0.1.vapi generated by (null) 0.28.0, do not modify. */

namespace bob {
	namespace builder {
		namespace build {
			namespace plugin {
				namespace control {
					[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
					public class ControlFileBuilder {
						public bob.builder.build.plugin.control.ControlFileBuilder architecture (string architecture);
						public bob.builder.build.plugin.control.ControlFileBuilder author (string author);
						public void build (bob.builder.filesystem.FileObject outputControlFile) throws GLib.Error;
						public static bob.builder.build.plugin.control.ControlFileBuilder controlFile ();
						public bob.builder.build.plugin.control.ControlFileBuilder depends (bob.builder.build.plugin.control.ControlFileDebianPackage dependsPackage);
						public bob.builder.build.plugin.control.ControlFileBuilder description (string description);
						public bob.builder.build.plugin.control.ControlFileBuilder optionalPriority ();
						public bob.builder.build.plugin.control.ControlFileBuilder package (string package);
						public bob.builder.build.plugin.control.ControlFileBuilder section (string section);
						public bob.builder.build.plugin.control.ControlFileBuilder version (string version);
					}
					[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
					public class ControlFileDebianPackage {
						public ControlFileDebianPackage ();
						public string to_string ();
						public ControlFileDebianPackage.withName (string packageName);
						public string name { get; set; }
					}
					[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
					public class ControlFileGenerator {
						public ControlFileGenerator ();
						public void generate (bob.builder.recipe.project.BobBuildProjectRecipe projectRecipe, bob.builder.filesystem.FileObject controlFile) throws GLib.Error;
						public void initialize () throws bob.builder.build.plugin.dependency.DependencyResolverError;
					}
					[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
					public class ControlFileProperties {
						public ControlFileProperties ();
						public void addAuthor (string author);
						public void addDependency (bob.builder.build.plugin.control.ControlFileDebianPackage dependency);
						public void setArchitecture (bob.builder.build.plugin.control.ControlFileArchitectureEnum architecture);
						public void setDescription (string description);
						public void setPackage (string package);
						public void setPriority (bob.builder.build.plugin.control.ControlFilePriorityEnum priority);
						public void setSection (bob.builder.build.plugin.control.ControlFileSectionEnum section);
						public void setVersion (string version);
						public void writeToFile (bob.builder.filesystem.FileObject outputFile) throws GLib.Error;
					}
					[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
					public class ControlFilePropertyPrinter : bob.builder.build.plugin.properties.AbstractPropertyPrinter {
						public ControlFilePropertyPrinter ();
						protected override string formatProperty (string name, string value);
					}
					[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
					public enum ControlFileArchitectureEnum {
						ANY,
						ALL,
						ALPHA,
						AMD64,
						ARM64,
						ARMEL,
						ARMHF,
						HPPA,
						HURD_I386,
						I386,
						KFREEBSD_AMD64,
						KFREEBSD_I386,
						M68K,
						MIPS,
						MIPSEL,
						POWERPC,
						POWERPCSPE,
						PPC64,
						PPC64EL,
						S390X,
						SH4,
						SPARC,
						SPARC64,
						X32;
						public string name ();
						public static bob.builder.build.plugin.control.ControlFileArchitectureEnum fromName (string? name, bob.builder.build.plugin.control.ControlFileArchitectureEnum defaultIfNull);
					}
					[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
					public enum ControlFilePriorityEnum {
						OPTIONAL,
						REQUIRED,
						IMPORTANT,
						STANDARD,
						EXTRA;
						public string name ();
						public static bob.builder.build.plugin.control.ControlFilePriorityEnum? fromName (string? name);
					}
					[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
					public enum ControlFileSectionEnum {
						UNKNOWN,
						ADMIN,
						CLI_MONO,
						COMM,
						DATABASE,
						DEBIAN_INSTALLER,
						DEBUG,
						DEVEL,
						DOC,
						EDITORS,
						ELECTRONICS,
						EMBEDDED,
						FONTS,
						GAMES,
						GNOME,
						GNU_R,
						GNUSTEP,
						GRAPHICS,
						HAMRADIO,
						HASKELL,
						HTTPD,
						INTERPRETERS,
						JAVA,
						KDE,
						KERNEL,
						LIBDEVEL,
						LIBS,
						LISP,
						LOCALIZATION,
						MAIL,
						MATH,
						MISC,
						NET,
						NEWS,
						OCAML,
						OLDLIBS,
						OTHEROSFS,
						PERL,
						PHP,
						PYTHON,
						RUBY,
						SCIENCE,
						SHELLS,
						SOUND,
						TEX,
						TEXT,
						TRANSLATIONS,
						UTILS,
						VCS,
						VIDEO,
						VIRTUAL,
						WEB,
						X11,
						XFCE,
						ZOPE;
						public string name ();
						public static bob.builder.build.plugin.control.ControlFileSectionEnum fromName (string? name, bob.builder.build.plugin.control.ControlFileSectionEnum defaultIfNull);
					}
				}
				namespace dependency {
					[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
					public class AptFilePackageResolver {
						public delegate void AptFilePackageResolvedDelegate (string resolvedPackage);
						public AptFilePackageResolver ();
						public bool anyFound ();
						public void forEachResolved (bob.builder.build.plugin.dependency.AptFilePackageResolver.AptFilePackageResolvedDelegate resolvedDelegate);
						public void initialize () throws bob.builder.build.plugin.dependency.DependencyResolverError;
						public void resolveFilePackages (string file);
					}
					[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
					public class CHeader : GLib.Object {
						public CHeader (string path, string girVersion);
						public string getVersionedFileName ();
						public string girVersion { get; set construct; }
						public string path { get; set construct; }
					}
					[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
					public class DebianPackageDepedencyResolver {
						public DebianPackageDepedencyResolver ();
						public void initialize () throws bob.builder.build.plugin.dependency.DependencyResolverError;
						public string[] resolveDebianPackages (bob.builder.recipe.project.BobBuildProjectDependency dependency);
					}
					[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
					public class DpkgPackageResolver {
						public delegate void DpkgPackageResolvedDelegate (string resolvedPackage);
						public DpkgPackageResolver ();
						public bool anyFound ();
						public void forEachResolved (bob.builder.build.plugin.dependency.DpkgPackageResolver.DpkgPackageResolvedDelegate resolvedDelegate);
						public void initialize () throws bob.builder.build.plugin.dependency.DependencyResolverError;
						public void resolveFilePackages (string file);
					}
					[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
					public class VapiFileCodeVisitor : Vala.CodeVisitor {
						public delegate void PackageFileDelegate (string packageFile);
						public VapiFileCodeVisitor ();
						public void forEachCHeader (bob.builder.build.plugin.dependency.VapiFileCodeVisitor.PackageFileDelegate packageFileDelegate);
						public void forEachVapiFile (bob.builder.build.plugin.dependency.VapiFileCodeVisitor.PackageFileDelegate packageFileDelegate);
						public override void visit_class (Vala.Class clazz);
						public override void visit_constant (Vala.Constant constant);
						public override void visit_enum (Vala.Enum enumeration);
						public override void visit_field (Vala.Field field);
						public override void visit_namespace (Vala.Namespace @namespace);
						public override void visit_source_file (Vala.SourceFile sourceFile);
					}
					[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
					public errordomain DependencyResolverError {
						INITIALIZATION_ERROR
					}
				}
				namespace execute {
					[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
					public class ExecutableRunner {
						public ExecutableRunner (string command);
						public string run () throws bob.builder.build.plugin.execute.ExecutableRunnerError;
					}
					[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
					public class PipedExecutableOutput {
						public PipedExecutableOutput ();
						public PipedExecutableOutput.fromStream (GLib.InputStream stream);
						public GLib.InputStream getStream ();
						public string? getText ();
					}
					[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
					public class PipedExecutableRunner {
						public delegate void PipedExecutableFinishedDelegate (bob.builder.build.plugin.execute.PipedExecutableOutput output);
						public PipedExecutableRunner (string argument, ...);
						public void run (bob.builder.build.plugin.execute.PipedExecutableRunner.PipedExecutableFinishedDelegate finishedDelegate) throws bob.builder.build.plugin.execute.PipedExecutableRunnerError;
						public void runWithInput (GLib.InputStream input, bob.builder.build.plugin.execute.PipedExecutableRunner.PipedExecutableFinishedDelegate finishedDelegate) throws bob.builder.build.plugin.execute.PipedExecutableRunnerError;
					}
					[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
					public class WhichChecker {
						public WhichChecker (string commandToCheck);
						public bool success ();
					}
					[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
					public errordomain ExecutableRunnerError {
						EXECUTABLE_ERROR
					}
					[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
					public errordomain PipedExecutableRunnerError {
						EXECUTABLE_ERROR
					}
				}
				namespace properties {
					[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
					public abstract class AbstractPropertyPrinter {
						public AbstractPropertyPrinter ();
						protected abstract string formatProperty (string name, string value);
						public size_t printProperty (GLib.OutputStream stream, string name, string value);
					}
					[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
					public class Properties {
						public delegate void ForEachPropertyDelegate (string name, string value);
						public Properties ();
						public void forEach (bob.builder.build.plugin.properties.Properties.ForEachPropertyDelegate propertyDelegate);
						public string? getProperty (string name, string? defaultIfNull);
						public void setProperty (string name, string value);
						public void writeToFile (bob.builder.filesystem.FileObject outputFile, bob.builder.build.plugin.properties.AbstractPropertyPrinter propertyPrinter) throws GLib.Error;
					}
					[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
					public class PropertiesFileWriter {
						public PropertiesFileWriter (bob.builder.build.plugin.properties.AbstractPropertyPrinter propertyPrinter);
						public void write (bob.builder.filesystem.FileObject output, bob.builder.build.plugin.properties.Properties properties) throws GLib.Error;
					}
				}
				[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
				public class BuildDebianPackagePlugin : bob.builder.build.plugin.AbstractBobBuildPlugin {
					public BuildDebianPackagePlugin ();
					public override void initialize (bob.builder.recipe.plugin.BobBuildPluginRecipe pluginRecipe) throws bob.builder.build.plugin.BobBuildPluginError;
					public override void run (bob.builder.recipe.project.BobBuildProjectRecipe projectRecipe, bob.builder.filesystem.DirectoryObject projectDirectory) throws bob.builder.build.plugin.BobBuildPluginError;
				}
				[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
				public class TemporaryDebianArchiveDirectoryStructure {
					public TemporaryDebianArchiveDirectoryStructure ();
					public static void debianDirectory (string directoryName, bob.builder.filesystem.DirectoryBuilder.DirectoryBuilderDelegate directoryDelegate);
				}
				[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
				public class WorkingDirectoryStructure {
					public WorkingDirectoryStructure ();
					public static bob.builder.build.plugin.WorkingDirectoryStructure read ();
					public bob.builder.build.plugin.WorkingDirectoryStructure source (bob.builder.filesystem.DirectoryBuilder.DirectoryBuilderDelegate directoryDelegate);
					public bob.builder.build.plugin.WorkingDirectoryStructure target (bob.builder.filesystem.DirectoryBuilder.DirectoryBuilderDelegate directoryDelegate);
				}
			}
		}
	}
}
[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
public static void initializePlugin (bob.builder.build.plugin.BobBuildPluginLoader pluginLoader);
[CCode (cheader_filename = "plugin-debian-0.0.1.h")]
public static string[] getDependencies ();
