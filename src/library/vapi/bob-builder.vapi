/* bob-builder.vapi generated by valac 0.25.3, do not modify. */

namespace com {
	namespace futureprocessing {
		namespace bob {
			namespace ansi {
				[CCode (cheader_filename = "bob-builder.h")]
				public class AnsiColorGenerator {
					public AnsiColorGenerator ();
					public string getBlue ();
					public string getDefault ();
					public string getGreen ();
					public string getRed ();
				}
				[CCode (cheader_filename = "bob-builder.h")]
				public class AnsiPrinter {
					public AnsiPrinter ();
					public com.futureprocessing.bob.ansi.AnsiPrinterSession startSession ();
				}
				[CCode (cheader_filename = "bob-builder.h")]
				public class AnsiPrinterSession {
					public AnsiPrinterSession ();
					public void commit (GLib.FileStream stream);
					public void flush (GLib.FileStream stream);
					public void reset (GLib.FileStream stream);
					public void setBold (bool bold);
					public void setColorBlue ();
					public void setColorDefault ();
					public void setColorGreen ();
					public void setColorRed ();
				}
			}
			namespace filesystem {
				[CCode (cheader_filename = "bob-builder.h")]
				public class DirectoryObject : com.futureprocessing.bob.filesystem.FileSystemObject {
					public DirectoryObject (GLib.File directory);
					public DirectoryObject.fromGivenLocation (string directoryLocation);
				}
				[CCode (cheader_filename = "bob-builder.h")]
				public class FileObject : com.futureprocessing.bob.filesystem.FileSystemObject {
					public FileObject (GLib.File file);
				}
				[CCode (cheader_filename = "bob-builder.h")]
				public abstract class FileSystemFilteringVisitor : com.futureprocessing.bob.filesystem.FileSystemVisitor {
					public FileSystemFilteringVisitor (com.futureprocessing.bob.filesystem.FileFilter filter);
					protected abstract void visitFileFiltered (GLib.File file);
				}
				[CCode (cheader_filename = "bob-builder.h")]
				public interface FileFilter : GLib.Object {
					public abstract bool fileMatchesCriteria (GLib.File file);
				}
				[CCode (cheader_filename = "bob-builder.h")]
				public interface FileSystemObject {
					public abstract void accept (com.futureprocessing.bob.filesystem.FileSystemVisitor visitor);
				}
				[CCode (cheader_filename = "bob-builder.h")]
				public interface FileSystemVisitor {
					public abstract void visitFile (GLib.File file);
				}
			}
			namespace log {
				[CCode (cheader_filename = "bob-builder.h")]
				public class Logger {
					public static com.futureprocessing.bob.log.Logger getLogger (string loggerId);
					public void logError (string message, ...);
					public void logInfo (string message, ...);
					public void logSuccess (string message, ...);
				}
			}
			namespace recipe {
				namespace plugin {
					[CCode (cheader_filename = "bob-builder.h")]
					public class BobBuildPluginConfiguration : GLib.Object {
						public BobBuildPluginConfiguration (string name);
						public string name { get; set construct; }
					}
					[CCode (cheader_filename = "bob-builder.h")]
					public class BuildPluginLoader<T> {
						public BuildPluginLoader (string name);
						public T instantiatePlugin ();
						public void loadBuildPlugin () throws com.futureprocessing.bob.recipe.plugin.BuildPluginError;
						public string path { get; private set; }
					}
					[CCode (cheader_filename = "bob-builder.h")]
					public interface BobBuildPlugin {
						public abstract string[] getRunAfter ();
						public abstract void initialize (com.futureprocessing.bob.recipe.plugin.BobBuildPluginConfiguration pluginConfiguration);
					}
					[CCode (cheader_filename = "bob-builder.h")]
					public errordomain BuildPluginError {
						MODULE_NOT_FOUND_ERROR,
						MODULE_TYPE_FUNCTION_MISSING_ERROR
					}
				}
				[CCode (cheader_filename = "bob-builder.h")]
				public class BobBuildRecipe : GLib.Object {
					public BobBuildRecipe ();
					public GLib.List<com.futureprocessing.bob.recipe.plugin.BobBuildPluginConfiguration> plugins { get; set; }
				}
				[CCode (cheader_filename = "bob-builder.h")]
				public class BobBuildRecipeBuilder : GLib.Object {
					public BobBuildRecipeBuilder ();
					public com.futureprocessing.bob.recipe.BobBuildRecipeBuilder addPlugin (com.futureprocessing.bob.recipe.plugin.BobBuildPluginConfiguration pluginConfiguration);
					public com.futureprocessing.bob.recipe.BobBuildRecipe build ();
				}
				[CCode (cheader_filename = "bob-builder.h")]
				public class BobBuildRecipeParser : GLib.Object {
					public static com.futureprocessing.bob.recipe.BobBuildRecipe parseFromJSONFile (GLib.FileInfo jsonFile) throws GLib.Error;
					public com.futureprocessing.bob.recipe.BobBuildRecipe parseFromJSONObject (Json.Object jsonObject);
				}
			}
			[CCode (cheader_filename = "bob-builder.h")]
			public class BobBuildContext : GLib.Object {
				public BobBuildContext ();
			}
			[CCode (cheader_filename = "bob-builder.h")]
			public class BobBuildSourceFilter : com.futureprocessing.bob.filesystem.FileFilter, GLib.Object {
				public BobBuildSourceFilter ();
			}
			[CCode (cheader_filename = "bob-builder.h")]
			public class BobRecipeProcessor : GLib.Object {
				public BobRecipeProcessor ();
				public void processRecipe (GLib.FileInfo recipeFile) throws GLib.Error;
			}
		}
	}
}
