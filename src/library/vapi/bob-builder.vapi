/* bob-builder.vapi generated by valac 0.28.0, do not modify. */

namespace bob {
	namespace builder {
		namespace ansi {
			[CCode (cheader_filename = "bob-builder.h")]
			public class AnsiColorGenerator {
				public AnsiColorGenerator ();
				public string getBlue ();
				public string getDefault ();
				public string getGreen ();
				public string getRed ();
			}
			[CCode (cheader_filename = "bob-builder.h")]
			public class AnsiPrinter {
				public AnsiPrinter ();
				public bob.builder.ansi.AnsiPrinterSession startSession ();
			}
			[CCode (cheader_filename = "bob-builder.h")]
			public class AnsiPrinterSession {
				public AnsiPrinterSession ();
				public void commit (GLib.FileStream stream);
				public void flush (GLib.FileStream stream);
				public void reset (GLib.FileStream stream);
				public void setBold (bool bold);
				public void setColorBlue ();
				public void setColorDefault ();
				public void setColorGreen ();
				public void setColorRed ();
			}
		}
		namespace build {
			namespace plugin {
				[CCode (cheader_filename = "bob-builder.h")]
				public abstract class AbstractBobBuildPlugin : GLib.Object {
					public AbstractBobBuildPlugin (string pluginName);
					public abstract void initialize (bob.builder.recipe.plugin.BobBuildPluginRecipe pluginRecipe) throws bob.builder.build.plugin.BobBuildPluginError;
					public abstract void run (bob.builder.recipe.project.BobBuildProjectRecipe projectRecipe) throws bob.builder.build.plugin.BobBuildPluginError;
					public string name { get; set construct; }
				}
				[CCode (cheader_filename = "bob-builder.h")]
				public class BobBuildPluginExecutionChain {
					public delegate void PluginToRunDelegate (bob.builder.build.plugin.AbstractBobBuildPlugin pluginToRun) throws bob.builder.build.plugin.BobBuildPluginError;
					public BobBuildPluginExecutionChain ();
					public void preparePlugins (bob.builder.build.plugin.BobBuildPluginExecutionChain.PluginToRunDelegate pluginToRunDelegate) throws bob.builder.build.plugin.BobBuildPluginError;
					public void runPlugins (bob.builder.recipe.project.BobBuildProjectRecipe projectRecipe) throws bob.builder.build.plugin.BobBuildPluginError;
					public void usePlugin (string pluginToRun);
				}
				[CCode (cheader_filename = "bob-builder.h")]
				public class BobBuildPluginLoader {
					public BobBuildPluginLoader ();
					public void addPlugin (bob.builder.build.plugin.AbstractBobBuildPlugin buildPlugin);
					public BobBuildPluginLoader.for_plugins_directory (string? pluginsDirectoryLocation);
					public bob.builder.build.plugin.AbstractBobBuildPlugin? getPlugin (string pluginName);
				}
				[CCode (cheader_filename = "bob-builder.h")]
				public errordomain BobBuildPluginError {
					INITIALIZATION_ERROR,
					RUN_ERROR
				}
				[CCode (cheader_filename = "bob-builder.h")]
				public errordomain BuildPluginError {
					PLUGINS_FOLDER_MISSING,
					MODULE_NOT_FOUND_ERROR,
					MODULE_TYPE_FUNCTION_MISSING_ERROR,
					DEPENDENCY_MISSING
				}
			}
			[CCode (cheader_filename = "bob-builder.h")]
			public class BobBuildContext : GLib.Object {
				public BobBuildContext ();
				public void proceed ();
				public void usePlugin (string buildPlugin);
				public BobBuildContext.withRecipe (bob.builder.recipe.BobBuildRecipe buildRecipe);
			}
		}
		namespace filesystem {
			[CCode (cheader_filename = "bob-builder.h")]
			public class DirectoryObject : bob.builder.filesystem.FileSystemObject {
				public DirectoryObject (GLib.File directory);
				public DirectoryObject.fromGivenLocation (string directoryLocation);
			}
			[CCode (cheader_filename = "bob-builder.h")]
			public class FileObject : bob.builder.filesystem.FileSystemObject {
				public FileObject (GLib.File file);
			}
			[CCode (cheader_filename = "bob-builder.h")]
			public abstract class FileSystemFilteringVisitor : bob.builder.filesystem.FileSystemVisitor {
				public FileSystemFilteringVisitor (bob.builder.filesystem.FileFilter filter);
				protected abstract void visitFileFiltered (GLib.File file);
			}
			[CCode (cheader_filename = "bob-builder.h")]
			public class Runtime {
				public Runtime ();
				public static string getRuntimeDirectory ();
				public static string resolveRuntimeRelativePath (string relativePath);
			}
			[CCode (cheader_filename = "bob-builder.h")]
			public interface FileFilter : GLib.Object {
				public abstract bool fileMatchesCriteria (GLib.File file);
			}
			[CCode (cheader_filename = "bob-builder.h")]
			public interface FileSystemObject {
				public abstract void accept (bob.builder.filesystem.FileSystemVisitor visitor);
			}
			[CCode (cheader_filename = "bob-builder.h")]
			public interface FileSystemVisitor {
				public abstract void visitFile (GLib.File file);
			}
		}
		namespace json {
			[CCode (cheader_filename = "bob-builder.h")]
			public class JsonArray : GLib.Object {
				public delegate void EachMemberDelegate (bob.builder.json.JsonObject jsonObject);
				public JsonArray ();
				public void forEachMember (bob.builder.json.JsonArray.EachMemberDelegate eachMemberDelegate);
				public JsonArray.fromJsonArray (Json.Array jsonArray);
			}
			[CCode (cheader_filename = "bob-builder.h")]
			public class JsonObject : GLib.Object {
				public JsonObject ();
				public JsonObject.fromJsonObject (Json.Object jsonObject);
				public bool getBooleanEntry (string key, bool defaultIfNull);
				public bob.builder.json.JsonObject? getJsonObjectEntry (string key);
				public bob.builder.json.JsonArray? getObjectArrayEntry (string key);
				public string getStringEntry (string key, string? defaultIfNull);
			}
		}
		namespace log {
			[CCode (cheader_filename = "bob-builder.h")]
			public class Logger {
				public static bob.builder.log.Logger getLogger (string loggerId);
				public void logError (string message, ...);
				public void logInfo (string message, ...);
				public void logSuccess (string message, ...);
			}
		}
		namespace recipe {
			namespace plugin {
				[CCode (cheader_filename = "bob-builder.h")]
				public class BobBuildPluginRecipe : GLib.Object {
					public BobBuildPluginRecipe (string name, bob.builder.json.JsonObject jsonConfiguration);
					public BobBuildPluginRecipe.@default ();
					public bob.builder.json.JsonObject jsonConfiguration { get; set construct; }
					public string name { get; set construct; }
				}
			}
			namespace project {
				[CCode (cheader_filename = "bob-builder.h")]
				public class BobBuildProjectRecipe {
					public BobBuildProjectRecipe ();
					public void addLibSourceFile (GLib.File projectSourceFile) throws GLib.Error;
					public void addMainSourceFile (GLib.File projectSourceFile) throws GLib.Error;
					public GLib.List<bob.builder.recipe.project.BobBuildProjectSourceFile> libSourceFiles { get; }
					public GLib.List<bob.builder.recipe.project.BobBuildProjectSourceFile> mainSourceFiles { get; }
					public string name { get; set; }
					public string shortName { get; set; }
					public string version { get; set; }
				}
				[CCode (cheader_filename = "bob-builder.h")]
				public class BobBuildProjectSourceFile : GLib.Object {
					public BobBuildProjectSourceFile ();
					public BobBuildProjectSourceFile.fromFileSystem (GLib.File projectSourceFile) throws GLib.Error;
					public string fileLocation { get; set; }
					public int64 fileSize { get; set; }
				}
			}
			[CCode (cheader_filename = "bob-builder.h")]
			public class BobBuildRecipe : GLib.Object {
				public BobBuildRecipe ();
				public void addPluginRecipe (bob.builder.recipe.plugin.BobBuildPluginRecipe recipe);
				public bob.builder.recipe.plugin.BobBuildPluginRecipe? getPluginRecipe (string pluginName);
				public bob.builder.recipe.project.BobBuildProjectRecipe project { get; set; }
			}
			[CCode (cheader_filename = "bob-builder.h")]
			public class BobBuildRecipeBuilder : GLib.Object {
				public BobBuildRecipeBuilder ();
				public bob.builder.recipe.BobBuildRecipe build ();
				public bob.builder.recipe.BobBuildRecipeBuilder plugin (bob.builder.recipe.plugin.BobBuildPluginRecipe pluginRecipe);
				public bob.builder.recipe.BobBuildRecipeBuilder project (string name, string shortName, string version);
			}
			[CCode (cheader_filename = "bob-builder.h")]
			public class BobBuildRecipeLoader {
				public static bob.builder.recipe.BobBuildRecipe loadFromJSON () throws GLib.Error;
				public bob.builder.recipe.BobBuildRecipe? loadFromJSONFile (string jsonFileName) throws GLib.Error;
			}
			[CCode (cheader_filename = "bob-builder.h")]
			public class BobBuildRecipeParser : GLib.Object {
				public static bob.builder.recipe.BobBuildRecipe parseFromJSONFile (GLib.FileInfo jsonFile) throws GLib.Error;
				public bob.builder.recipe.BobBuildRecipe parseFromJSONObject (Json.Object jsonObject);
			}
		}
	}
}
